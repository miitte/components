import api from '../api.js'

class {
  onCreate(input) {
    this.state = {
      route: input.route ? input.route : '/',
      entries: input.entries ? input.entries: [],
      entry: input.entry,
      currentIndex: '',
      pending: 0,
    }
    this.state.currentIndex = input.entries.indexOf(input.entry)
  }
  onMount() {
    // Set default root as first state.
    history.replaceState({
      route: this.state.route
    }, document.title, this.state.route)

    // Change route on history changes.
    window.onpopstate = e => {
      if (e.state === undefined || e.state.route === undefined) return
      this.state.route = e.state.route
      if (!e.state.noTravel) {
        this.travelTo(e.state.route)
      }
    }
  }
  handleRoute(route) {
    if (this.state.route === route) return
    // Add route to history.
    history.pushState({
      route: route
    }, document.title, route)
    this.state.route = route
    this.travelTo(route)
  }
  handleNoTravelRoute(index) {
    if (this.state.route === this.input.entries[index]) return
     history.pushState({
      route: this.input.entries[index],
      noTravel: true,
    }, document.title, this.input.entries[index])
    this.state.currentIndex = index
    this.state.route = this.input.entries[index]
  }
  travelTo(route) {
    this.state.pending++
    api.request(route)
      .then(data => {
        this.state.pending--
        this.state.entries = data.entries
        this.forceUpdate()
      })
      .catch(err => {
        this.state.pending--
        console.log(err)
        alert(err)
      })
  }
}

context route=state.route entries=state.entries pending=state.pending entry=state.entry currentIndex=state.currentIndex on-route('handleRoute') on-route-notravel('handleNoTravelRoute')
  <${input.renderBody}/>
